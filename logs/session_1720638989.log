Analyze the following codebase:
    
    Description: A code review agent that reviews git diffs and provides feedback on changes to the codebase using the Anthropic API.
    
    Codebase details:
    {
  "file_count": 12,
  "total_lines": 675,
  "file_types": {
    ".txt": 6,
    ".toml": 1,
    ".md": 2,
    ".py": 2,
    "": 1
  },
  "file_list": [
    {
      "path": "requirements.txt",
      "contents": "annotated-types==0.7.0\nanthropic==0.29.0\nanyio==4.4.0\ncertifi==2024.6.2\ncharset-normalizer==3.3.2\ncolorama==0.4.6\ndistro==1.9.0\nfilelock==3.15.4\nfsspec==2024.6.0\nh11==0.14.0\nhalo==0.0.31\nhttpcore==1.0.5\nhttpx==0.27.0\nhuggingface-hub==0.23.4\nidna==3.7\njiter==0.5.0\nlog-symbols==0.0.14\npackaging==24.1\npydantic==2.7.4\npydantic_core==2.18.4\nPyYAML==6.0.1\nrequests==2.32.3\nsetuptools==69.5.1\nsix==1.16.0\nsniffio==1.3.1\nspinners==0.0.24\ntermcolor==2.4.0\ntokenizers==0.19.1\ntqdm==4.66.4\ntyping_extensions==4.12.2\nurllib3==2.2.2\nwheel==0.43.0\n"
    },
    {
      "path": "pyproject.toml",
      "contents": "[project]\nname = \"code-review-agent\"\nversion = \"0.1.0\"\ndescription = \"A code review agent that reviews git diffs and provides feedback on the changes to the codebase. The agent will use the Anthropic API to review the changes and provide feedback on the changes to the codebase.\"\nauthors = [{\"name\" = \"Keenan Keeling\", \"email\" = \"kkeeling@automatastudios.com\"}]\ndependencies = [\n    \"colorama\",\n    \"halo\",\n    \"anthropic\",\n]\n\n[project.scripts]\ncode-review-agent = \"code_review_agent:cli\"\n"
    },
    {
      "path": "README.md",
      "contents": "# Code Review Agent\n\nA code review agent that reviews git diffs and provides feedback on changes to the codebase using the Anthropic API.\n\n## Installation\n\nTo install the Code Review Agent using pipx, follow these steps:\n\n1. Ensure you have pipx installed. If not, install it using:\n\n   ```\n   python3 -m pip install --user pipx\n   python3 -m pipx ensurepath\n   ```\n\n2. Install the Code Review Agent:\n\n   ```\n   pipx install git+https://github.com/kkeeling/code-review-agent.git\n   ```\n\n## Usage\n\nTo use the Code Review Agent, you need to have an Anthropic API key. You can set it as an environment variable or pass it as an argument.\n\n### Basic Usage\n\n```\ncode-review-agent [--folder FOLDER] [--branch BRANCH] [--api-key API_KEY]\n```\n\n- `--folder`: Path to the git repository folder (default: current working directory)\n- `--branch`: Name of the branch to compare against (default: main)\n- `--api-key`: Anthropic API key (default: environment variable ANTHROPIC_API_KEY)\n\n### Examples\n\n1. Review changes in the current directory against the main branch:\n\n   ```\n   code-review-agent\n   ```\n\n2. Review changes in a specific folder against a different branch:\n\n   ```\n   code-review-agent --folder /path/to/repo --branch develop\n   ```\n\n3. Provide the API key as an argument:\n\n   ```\n   code-review-agent --api-key your_api_key_here\n   ```\n\n### Setting up the API Key\n\nIt's recommended to set the Anthropic API key as an environment variable:\n\n```\nexport ANTHROPIC_API_KEY=your_api_key_here\n```\n\nYou can add this line to your shell configuration file (e.g., `.bashrc` or `.zshrc`) to make it permanent.\n\n## How It Works\n\nThe Code Review Agent performs the following steps:\n\n1. Checks if the specified folder is a git repository.\n2. Retrieves the git diff between the current branch and the specified branch.\n3. Sends the diff to the Anthropic API for analysis.\n4. Displays the code review feedback, including:\n   - A summary of changes\n   - Identified issues (if any)\n   - A code quality score\n   - Reasoning for the score\n\n## Requirements\n\n- Python 3.6+\n- Git\n- Anthropic API key\n\n## Project Structure\n\nThe main components of the Code Review Agent are:\n\n1. `code_review_agent.py`: The main script that handles the git operations and interacts with the Anthropic API.\n2. `system_prompt.md`: Contains the system prompt used to guide the AI in performing the code review.\n3. `pyproject.toml`: Defines the project metadata and dependencies.\n\n## Contributing\n\nContributions to the Code Review Agent are welcome! Please follow these steps to contribute:\n\n1. Fork the repository\n2. Create a new branch for your feature or bug fix\n3. Make your changes and commit them with a clear commit message\n4. Push your changes to your fork\n5. Create a pull request with a description of your changes\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\n## Acknowledgments\n\n- This project uses the Anthropic API for AI-powered code reviews.\n- Thanks to all contributors and users of the Code Review Agent.\n\n## Support\n\nIf you encounter any issues or have questions, please open an issue on the GitHub repository."
    },
    {
      "path": "code_review_agent.py",
      "contents": "import os\nimport sys\nimport subprocess\nimport argparse\nimport requests\nfrom colorama import Fore, Style, init\nfrom halo import Halo\nfrom anthropic import Anthropic\n\n# Initialize colorama\ninit()\n\ndef output(text, color=\"default\"):\n    colors = {\n        \"default\": Style.RESET_ALL,\n        \"red\": Fore.RED,\n        \"green\": Fore.GREEN,\n        \"yellow\": Fore.YELLOW,\n        \"blue\": Fore.BLUE,\n        \"magenta\": Fore.MAGENTA,\n        \"cyan\": Fore.CYAN,\n        \"white\": Fore.WHITE,\n    }\n    color_code = colors.get(color, Style.RESET_ALL)\n    print(f\"{color_code}{text}{Style.RESET_ALL}\")\n\ndef is_git_repository(folder_path):\n    return os.path.isdir(os.path.join(folder_path, '.git'))\n\ndef branch_exists(folder_path, branch_name):\n    try:\n        result = subprocess.run(\n            [\"git\", \"show-ref\", \"--verify\", \"--quiet\", f\"refs/heads/{branch_name}\"],\n            cwd=folder_path,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE\n        )\n        return result.returncode == 0\n    except Exception as e:\n        print(f\"Error checking if branch exists: {e}\")\n        return False\n\ndef get_diff(folder_path, branch_name, active_branch):\n    try:\n        # Checkout the branch_name (ex. main)\n        subprocess.run([\"git\", \"checkout\", branch_name], cwd=folder_path, check=True)\n\n        # Perform a git pull\n        subprocess.run([\"git\", \"pull\"], cwd=folder_path, check=True)\n\n        # Checkout the active branch again (your branch)\n        subprocess.run([\"git\", \"checkout\", active_branch], cwd=folder_path, check=True)\n\n        # Merge the branch_name into the active branch\n        subprocess.run([\"git\", \"merge\", branch_name], cwd=folder_path, check=True)\n\n        # Return the result of \"git --no-pager diff branch_name\" excluding package-lock\n        result = subprocess.run(\n            [\"git\", \"--no-pager\", \"diff\", branch_name, \":(exclude)package-lock.json\"],\n            cwd=folder_path,\n            check=True,\n            text=True,\n            stdout=subprocess.PIPE\n        )\n        return result.stdout\n\n    except subprocess.CalledProcessError as e:\n        output(f\"Error during git operations: {e}\", color=\"red\")\n        return None\n\ndef get_active_git_branch(folder_path):\n    try:\n        result = subprocess.run(\n            [\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n            cwd=folder_path,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        if result.returncode == 0:\n            return result.stdout.strip()\n        else:\n            return None\n    except Exception as e:\n        print(f\"Error detecting git branch: {e}\")\n        return None\n\ndef run_code_review_agent(git_diff, branch_name, api_key):\n    # Initialize the Anthropic client\n    output(\"Initializing the Anthropic client...\", color=\"green\")\n    client = Anthropic(api_key=api_key)\n\n    # Load the system prompt\n    output(\"Loading the system prompt...\", color=\"green\")\n    system_prompt = \"You are a code review agent that reviews code for potential issues.\"  # fallback system prompt\n    try:\n        response = requests.get(\"https://raw.githubusercontent.com/kkeeling/code-review-agent/main/system_prompt.md\")\n        response.raise_for_status()\n        system_prompt = response.text\n    except requests.RequestException as e:\n        output(f\"Error loading system prompt from remote location: {e}\", color=\"red\")\n\n    output(\"Preparing the messages for Claude...\", color=\"green\")\n    messages = [\n        {\"role\": \"user\", \"content\": f\"# INPUT\\n$> git --no-pager diff {branch_name}\\n\\n{git_diff}\"}\n    ]\n\n    output(\"Sending the diff result to Claude...\", color=\"green\")\n    with Halo(text='Waiting for Claude to respond...', spinner='dots'):\n        response = client.messages.create(\n            model=\"claude-3-5-sonnet-20240620\",\n            max_tokens=4000,\n            system=system_prompt,\n            messages=messages\n        )\n\n    # Process the response\n    output(\"Processing the response from Claude...\", color=\"green\")\n    assistant_response = \"\"\n    for content_block in response.content:\n        if content_block.type == \"text\":\n            assistant_response += content_block.text\n            output(f\"\\n{content_block.text}\", color=\"blue\")\n    \n    return assistant_response\n\ndef main(folder_path=None, branch_name=\"main\", api_key=None):\n    # check if the API key is set\n    if not api_key:\n        output(\"ERROR: Anthropic API key is not set.\", color=\"red\")\n        exit(1)\n\n    # Set default folder path if not provided\n    if not folder_path:\n        folder_path = os.getcwd()\n        output(f\"No folder path provided. Using current working directory: {folder_path}\", color=\"yellow\")\n    else:\n        # Check if the provided path is a valid directory\n        if not os.path.isdir(folder_path):\n            output(f\"ERROR: The provided path '{folder_path}' is not a valid directory.\", color=\"red\")\n            exit(1)\n\n    # Check if the provided path is a git repository\n    if not is_git_repository(folder_path):\n        output(f\"ERROR: The provided path '{folder_path}' is not a git repository.\", color=\"red\")\n        exit(1)\n    \n    # Check if the specified branch exists in the repository\n    if branch_name and not branch_exists(folder_path, branch_name):\n        output(f\"ERROR: The branch '{branch_name}' does not exist in the repository.\", color=\"red\")\n        exit(1)\n\n    # Get the active git branch\n    active_branch = get_active_git_branch(folder_path)\n\n    # Check if the active git branch could be determined\n    if not active_branch:\n        output(\"ERROR: Could not determine the active git branch.\", color=\"red\")\n        exit(1)\n\n    # Check if the active branch and the specified branch are the same\n    if active_branch == branch_name:\n        output(f\"ERROR: Active branch and specified branch are the same: {active_branch}\", color=\"red\")\n        exit(1)\n\n    # Get the diff between the active branch and the specified branch\n    output(f\"Processing folder: {folder_path}\", color=\"yellow\")\n    diff_result = get_diff(folder_path, branch_name, active_branch)\n    \n    # Run the code review agent\n    run_code_review_agent(diff_result, active_branch, api_key)\n\ndef cli():\n    parser = argparse.ArgumentParser(description=\"Process a git repository folder.\")\n    parser.add_argument(\"--folder\", help=\"Path to the folder (default: current working directory)\")\n    parser.add_argument(\"--api-key\", default=os.environ.get(\"ANTHROPIC_API_KEY\"), help=\"Anthropic API key (default: environment variable ANTHROPIC_API_KEY)\")\n    parser.add_argument(\"--branch\", default=\"main\", help=\"Name of the branch to compare against (default: main)\")\n\n    args = parser.parse_args()\n\n    main(args.folder, args.branch, args.api_key)\n\nif __name__ == \"__main__\":\n    cli()\n"
    },
    {
      "path": "system_prompt.md",
      "contents": "# IDENTITY AND PURPOSE\n\nYou are an experienced software engineer about to review code changes a human developer. You are thorough and explain your requested changes well, you provide insights and reasoning for the changes and enumerate potential bugs with code. If the code represents changes to an API, you should check for any issues with backwards compatibility.\nYou take your time and consider the INPUT and review the code. The INPUT you will be reading is the output of the git diff command.\n\n\n## INPUT FORMAT\n\nThe expected input format is command line output from git diff that compares all the changes of the current branch with the main repository branch.\n\nThe syntax of the output of `git diff` is a series of lines that indicate changes made to files in a repository. Each line represents a change, and the format of each line depends on the type of change being made.\n\nHere are some examples of how the syntax of `git diff` might look for different types of changes:\n\nBEGIN EXAMPLES\n* Adding a file:\n```\n+++ b/newfile.txt\n@@ -0,0 +1 @@\n+This is the contents of the new file.\n```\nIn this example, the line `+++ b/newfile.txt` indicates that a new file has been added, and the line `@@ -0,0 +1 @@` shows that the first line of the new file contains the text \"This is the contents of the new file.\"\n\n* Deleting a file:\n```\n--- a/oldfile.txt\n+++ b/deleted\n@@ -1 +0,0 @@\n-This is the contents of the old file.\n```\nIn this example, the line `--- a/oldfile.txt` indicates that an old file has been deleted, and the line `@@ -1 +0,0 @@` shows that the last line of the old file contains the text \"This is the contents of the old file.\" The line `+++ b/deleted` indicates that the file has been deleted.\n\n* Modifying a file:\n```\n--- a/oldfile.txt\n+++ b/newfile.txt\n@@ -1,3 +1,4 @@\n This is an example of how to modify a file.\n-The first line of the old file contains this text.\n The second line contains this other text.\n+This is the contents of the new file.\n```\nIn this example, the line `--- a/oldfile.txt` indicates that an old file has been modified, and the line `@@ -1,3 +1,4 @@` shows that the first three lines of the old file have been replaced with four lines, including the new text \"This is the contents of the new file.\"\n\n* Moving a file:\n```\n--- a/oldfile.txt\n+++ b/newfile.txt\n@@ -1 +1 @@\n This is an example of how to move a file.\n```\nIn this example, the line `--- a/oldfile.txt` indicates that an old file has been moved to a new location, and the line `@@ -1 +1 @@` shows that the first line of the old file has been moved to the first line of the new file.\n\n* Renaming a file:\n```\n--- a/oldfile.txt\n+++ b/newfile.txt\n@@ -1 +1,2 @@\n This is an example of how to rename a file.\n+This is the contents of the new file.\n```\nIn this example, the line `--- a/oldfile.txt` indicates that an old file has been renamed to a new name, and the line `@@ -1 +1,2 @@` shows that the first line of the old file has been moved to the first two lines of the new file.\nEND EXAMPLES\n\n# OUTPUT INSTRUCTIONS\n\n1. Carefully review the code changes in the git diff output. Look for any issues related to:\n   - Best practices and code style\n   - Potential errors or bugs introduced\n   - Overall code quality and maintainability\n   - Backwards compatibility issues, if the code changes represents changes to an API\n2. Identify the changes made in the code, including added, modified, and deleted files.\n3. Understand the purpose of these changes by examining the code and any comments.\n4. Write a detailed code review in markdown syntax. This should include:\n   - A brief summary of the changes made.\n   - A list of issues found in the code.\n   - A score for the code quality, from 1 to 5, where:\n    1 = Very poor quality changes with many issues\n    2 = Below average quality with several significant issues \n    3 = Average quality with some issues to address\n    4 = Good quality with only minor issues\n    5 = Excellent quality changes\n   - A reasoning for the score.\n5. Ensure your description is written in a \"matter of fact\", clear, and concise language.\n6. Use markdown code blocks to reference specific lines of code when necessary.\n7. Considering best practices, potential bugs, and overall code quality, analyze the code in each file to identify any critical issues or bugs with the code. If the code changes refer to an api, you should check for any issues with backwards compatibility, otherwise do not consider backwards compatibility issues. Any issue that is not a bug is considered a minor issue. Any issue related to code maintainability is considered a minor issue. Any issue related to security is considered a critical issue. Any issue related to performance is considered a minor issue. Any issue related to code style is considered a minor issue. Any issue related to compatibility with other systems or software is considered a minor issue. Any issue related to testing or the need for testing should not be reported.\n8. Go through each issue you identified. For each issue:\n   - Rate the issue on a scale of 1-10, where 1 is the most severe and 10 is the least severe. Minor issues should be rated 6 or higher, major issues should be rated between 3 and 5, and critical issues should be rated 1 or 2.\n   - Describe the issue\n   - Explain why it is a problem\n   - Suggest how to improve or resolve the issue\n   - Provide specific examples from the diff to support your points\n   - Ignore any issue with severity 5 or greater\n9.  After completing your review, provide an overall score rating the code change quality on a scale of 1-5, where:\n   1 = Very poor quality changes with many issues\n   2 = Below average quality with several significant issues \n   3 = Average quality with some issues to address\n   4 = Good quality with only minor issues\n   5 = Excellent quality changes\n\n   Following your score, provide a reasoning that summarizes the main points from your review that justify the score you gave. Mention the most significant issues (if any) as well as positive aspects (if any).\n\n   Remember to consider best practices, potential bugs, and overall code quality in your analysis. Provide specific details and examples from the diff to support your points.\n10. Output the summary, issues, score, and reasoning.\n\n\n# OUTPUT FORMAT\n\n1. **Summary**: Start with a brief summary of the changes made. This should be a concise explanation of the overall changes.\n\n2.  **Issues (1-10, 1 is the most severe and 10 is the least severe)**: Output the issues with the code changes. If an issue severity is 6 or greater, do not output the issue. If no issues are found, output \"No issues found\".\n\n3.  **Score**: Output the score and reasoning.\n\nRemember, the output should be in markdown format, clear, concise, and understandable even for someone who is not familiar with the project."
    },
    {
      "path": "code_review_agent.egg-info/PKG-INFO",
      "contents": "Metadata-Version: 2.1\nName: code-review-agent\nVersion: 0.1.0\nSummary: A code review agent that reviews git diffs and provides feedback on the changes to the codebase. The agent will use the Anthropic API to review the changes and provide feedback on the changes to the codebase.\nAuthor-email: Keenan Keeling <kkeeling@automatastudios.com>\nRequires-Dist: colorama\nRequires-Dist: halo\nRequires-Dist: anthropic\n"
    },
    {
      "path": "code_review_agent.egg-info/SOURCES.txt",
      "contents": "README.md\ncode_review_agent.py\npyproject.toml\ncode_review_agent.egg-info/PKG-INFO\ncode_review_agent.egg-info/SOURCES.txt\ncode_review_agent.egg-info/dependency_links.txt\ncode_review_agent.egg-info/entry_points.txt\ncode_review_agent.egg-info/requires.txt\ncode_review_agent.egg-info/top_level.txt"
    },
    {
      "path": "code_review_agent.egg-info/entry_points.txt",
      "contents": "[console_scripts]\ncode-review-agent = code_review_agent:cli\n"
    },
    {
      "path": "code_review_agent.egg-info/requires.txt",
      "contents": "colorama\nhalo\nanthropic\n"
    },
    {
      "path": "code_review_agent.egg-info/top_level.txt",
      "contents": "code_review_agent\n"
    },
    {
      "path": "code_review_agent.egg-info/dependency_links.txt",
      "contents": "\n"
    },
    {
      "path": "build/lib/code_review_agent.py",
      "contents": "import os\nimport sys\nimport subprocess\nimport argparse\nimport requests\nfrom colorama import Fore, Style, init\nfrom halo import Halo\nfrom anthropic import Anthropic\n\n# Initialize colorama\ninit()\n\ndef output(text, color=\"default\"):\n    colors = {\n        \"default\": Style.RESET_ALL,\n        \"red\": Fore.RED,\n        \"green\": Fore.GREEN,\n        \"yellow\": Fore.YELLOW,\n        \"blue\": Fore.BLUE,\n        \"magenta\": Fore.MAGENTA,\n        \"cyan\": Fore.CYAN,\n        \"white\": Fore.WHITE,\n    }\n    color_code = colors.get(color, Style.RESET_ALL)\n    print(f\"{color_code}{text}{Style.RESET_ALL}\")\n\ndef is_git_repository(folder_path):\n    return os.path.isdir(os.path.join(folder_path, '.git'))\n\ndef branch_exists(folder_path, branch_name):\n    try:\n        result = subprocess.run(\n            [\"git\", \"show-ref\", \"--verify\", \"--quiet\", f\"refs/heads/{branch_name}\"],\n            cwd=folder_path,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE\n        )\n        return result.returncode == 0\n    except Exception as e:\n        print(f\"Error checking if branch exists: {e}\")\n        return False\n\ndef get_diff(folder_path, branch_name, active_branch):\n    try:\n        # Checkout the branch_name (ex. main)\n        subprocess.run([\"git\", \"checkout\", branch_name], cwd=folder_path, check=True)\n\n        # Perform a git pull\n        subprocess.run([\"git\", \"pull\"], cwd=folder_path, check=True)\n\n        # Checkout the active branch again (your branch)\n        subprocess.run([\"git\", \"checkout\", active_branch], cwd=folder_path, check=True)\n\n        # Merge the branch_name into the active branch\n        subprocess.run([\"git\", \"merge\", branch_name], cwd=folder_path, check=True)\n\n        # Return the result of \"git --no-pager diff branch_name\" excluding package-lock\n        result = subprocess.run(\n            [\"git\", \"--no-pager\", \"diff\", branch_name, \":(exclude)package-lock.json\"],\n            cwd=folder_path,\n            check=True,\n            text=True,\n            stdout=subprocess.PIPE\n        )\n        return result.stdout\n\n    except subprocess.CalledProcessError as e:\n        output(f\"Error during git operations: {e}\", color=\"red\")\n        return None\n\ndef get_active_git_branch(folder_path):\n    try:\n        result = subprocess.run(\n            [\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"],\n            cwd=folder_path,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        if result.returncode == 0:\n            return result.stdout.strip()\n        else:\n            return None\n    except Exception as e:\n        print(f\"Error detecting git branch: {e}\")\n        return None\n\ndef run_code_review_agent(git_diff, branch_name, api_key):\n    # Initialize the Anthropic client\n    output(\"Initializing the Anthropic client...\", color=\"green\")\n    client = Anthropic(api_key=api_key)\n\n    # Load the system prompt\n    output(\"Loading the system prompt...\", color=\"green\")\n    system_prompt = \"You are a code review agent that reviews code for potential issues.\"  # fallback system prompt\n    try:\n        response = requests.get(\"https://raw.githubusercontent.com/kkeeling/code-review-agent/main/system_prompt.md\")\n        response.raise_for_status()\n        system_prompt = response.text\n    except requests.RequestException as e:\n        output(f\"Error loading system prompt from remote location: {e}\", color=\"red\")\n\n    output(\"Preparing the messages for Claude...\", color=\"green\")\n    messages = [\n        {\"role\": \"user\", \"content\": f\"# INPUT\\n$> git --no-pager diff {branch_name}\\n\\n{git_diff}\"}\n    ]\n\n    output(\"Sending the diff result to Claude...\", color=\"green\")\n    with Halo(text='Waiting for Claude to respond...', spinner='dots'):\n        response = client.messages.create(\n            model=\"claude-3-5-sonnet-20240620\",\n            max_tokens=4000,\n            system=system_prompt,\n            messages=messages\n        )\n\n    # Process the response\n    output(\"Processing the response from Claude...\", color=\"green\")\n    assistant_response = \"\"\n    for content_block in response.content:\n        if content_block.type == \"text\":\n            assistant_response += content_block.text\n            output(f\"\\n{content_block.text}\", color=\"blue\")\n    \n    return assistant_response\n\ndef main(folder_path=None, branch_name=\"main\", api_key=None):\n    # check if the API key is set\n    if not api_key:\n        output(\"ERROR: Anthropic API key is not set.\", color=\"red\")\n        exit(1)\n\n    # Set default folder path if not provided\n    if not folder_path:\n        folder_path = os.getcwd()\n        output(f\"No folder path provided. Using current working directory: {folder_path}\", color=\"yellow\")\n    else:\n        # Check if the provided path is a valid directory\n        if not os.path.isdir(folder_path):\n            output(f\"ERROR: The provided path '{folder_path}' is not a valid directory.\", color=\"red\")\n            exit(1)\n\n    # Check if the provided path is a git repository\n    if not is_git_repository(folder_path):\n        output(f\"ERROR: The provided path '{folder_path}' is not a git repository.\", color=\"red\")\n        exit(1)\n    \n    # Check if the specified branch exists in the repository\n    if branch_name and not branch_exists(folder_path, branch_name):\n        output(f\"ERROR: The branch '{branch_name}' does not exist in the repository.\", color=\"red\")\n        exit(1)\n\n    # Get the active git branch\n    active_branch = get_active_git_branch(folder_path)\n\n    # Check if the active git branch could be determined\n    if not active_branch:\n        output(\"ERROR: Could not determine the active git branch.\", color=\"red\")\n        exit(1)\n\n    # Check if the active branch and the specified branch are the same\n    if active_branch == branch_name:\n        output(f\"ERROR: Active branch and specified branch are the same: {active_branch}\", color=\"red\")\n        exit(1)\n\n    # Get the diff between the active branch and the specified branch\n    output(f\"Processing folder: {folder_path}\", color=\"yellow\")\n    diff_result = get_diff(folder_path, branch_name, active_branch)\n    \n    # Run the code review agent\n    run_code_review_agent(diff_result, active_branch, api_key)\n\ndef cli():\n    parser = argparse.ArgumentParser(description=\"Process a git repository folder.\")\n    parser.add_argument(\"--folder\", help=\"Path to the folder (default: current working directory)\")\n    parser.add_argument(\"--api-key\", default=os.environ.get(\"ANTHROPIC_API_KEY\"), help=\"Anthropic API key (default: environment variable ANTHROPIC_API_KEY)\")\n    parser.add_argument(\"--branch\", default=\"main\", help=\"Name of the branch to compare against (default: main)\")\n\n    args = parser.parse_args()\n\n    main(args.folder, args.branch, args.api_key)\n\nif __name__ == \"__main__\":\n    cli()\n"
    }
  ]
}
    